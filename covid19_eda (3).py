# -*- coding: utf-8 -*-
"""covid19_eda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q4kaZbKeacKWwxGb1BuKTa3r2eRSo0PE

**For plotly graphs and Javascript to run properly, kindly open the notebook in colaboratory by clicking the link above.**

**COVID-19 Dataset Analysis**

**Context**

Coronaviruses are a large family of viruses which may cause illness in animals or humans. In humans, several coronaviruses are known to cause respiratory infections ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS) and Severe Acute Respiratory Syndrome (SARS). The most recently discovered coronavirus causes coronavirus disease COVID-19 - World Health Organization

The number of new cases are increasing day by day around the world. This dataset has information from the states and union territories of India at daily level.

State level data comes from Ministry of Health & Family Welfare

Individual level data comes from covid19india

**Content**

COVID-19 cases at daily level is present in covid_19_india.csv file

Individual level details are present in IndividualDetails.csv file

Population at state level is present in population_india_census2011.csv file

Number of COVID-19 tests at daily level in ICMRTestingDetails.csv file

Number of hospital beds in each state in present in HospitalBedsIndia.csv file

**Source**

2 datasets have been visualized:

1- https://www.kaggle.com/sudalairajkumar/covid19-in-india



2- https://www.kaggle.com/soham1024/covid-19-india-zone-classification

**This project is divided into two parts.**

**This notebook is Part I and consists of Exploratory Data Analysis of the dataset**

**Exploratory Data Analysis - EDA**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.express as px
import IPython
import re
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")
from google.colab import files
import io

# to display plotly plots in colab
def configure_plotly_browser_state():
  import IPython
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
        <script>
          requirejs.config({
            paths: {
              base: '/static/base',
              plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext',
            },
          });
        </script>
        '''))

uploaded=files.upload()

# reading the dataset 1
df_individual=pd.read_csv(io.StringIO(uploaded['IndividualDetails.csv'].decode('utf-8')))
df_age=pd.read_csv(io.StringIO(uploaded['AgeGroupDetails.csv'].decode('utf-8')))
df_hospbeds=pd.read_csv(io.StringIO(uploaded['HospitalBedsIndia.csv'].decode('utf-8')))
df_icmrlabs=pd.read_csv(io.StringIO(uploaded['ICMRTestingLabs.csv'].decode('utf-8')))
df_icmrdet=pd.read_csv(io.StringIO(uploaded['ICMRTestingDetails.csv'].decode('utf-8')))
df_covidindia=pd.read_csv(io.StringIO(uploaded['covid_19_india.csv'].decode('utf-8')))
df_population=pd.read_csv(io.StringIO(uploaded['population_india_census2011.csv'].decode('utf-8')))
df_statewise=pd.read_csv(io.StringIO(uploaded['StatewiseTestingDetails.csv'].decode('utf-8')))

# reading the dataset 2
df_lockdownwar=pd.read_csv(io.StringIO(uploaded['lockdownindiawarningzones.csv'].decode('utf-8')))

"""**COVID-19 confirmed Cases By Indian Neighbour Countries**"""

# flourish data visualization - live story
# run this cell to see live story if not visible
from IPython.core.display import HTML
HTML('''<div class="flourish-embed" data-src="story/258632" data-url="https://flo.uri.sh/story/258632/embed"><script src="https://public.flourish.studio/resources/embed.js"></script></div>''')

"""**IndividualDetails.csv**"""

df_individual.head()

df_individual.info()

sum(df_individual.duplicated())
#since id is unique for each row and is numbering only starting from 0 onwards

df_individual.drop('id',axis=1,inplace=True)

sum(df_individual.duplicated())

df_individual.drop_duplicates(inplace=True)

sum(df_individual.duplicated())

df_individual.isnull().sum()

gender_count=df_individual['gender'].value_counts()
print(gender_count)

summ=gender_count.sum()  
print('No.of counts:',summ)

per=[]
for i in gender_count:
    perc=i/summ
    print(perc)
    per.append(format(perc,'.2f'))

plt.figure(figsize=(10,6))    
plt.title('Gender-Wise Comparision')
plt.pie(per,autopct='%.1f%%')
plt.legend(gender_count.index,title='Gender')

"""**AgeGroupDetails.csv**

Age-Wise Data Analysis.
"""

df_age.head()

df_age.info()

df_age.drop('Sno',axis=1,inplace=True)

sum(df_age.duplicated())

df_age.isnull().sum()

import re

"""We cannot convert datatype of df_age['Percentage'] due to the presence of '%' sign in every value. So we have to use re to get the numeric values of percentages."""

perc=[]
for i in df_age['Percentage']:
    per=float(re.findall("\d+\.\d+",i)[0])
    print(per)
    perc.append(per)

configure_plotly_browser_state()   # this is required to display plotly plots in colab
px.pie(df_age,values=perc,names="AgeGroup",title="Age-Group Case Distribution")

"""**HospitalBedsIndia.csv**

Hospital beds state-wise comparison.
"""

df_hospbeds.head()

df_hospbeds.info()

df_hospbeds.drop('Sno',axis=1,inplace=True)

sum(df_hospbeds.duplicated())

df_hospbeds.isnull().sum()

# calculating totla no. of beds
df_hospbeds['Total Beds']=df_hospbeds['NumPublicBeds_HMIS'] + df_hospbeds['NumRuralBeds_NHP18']+df_hospbeds['NumUrbanBeds_NHP18']

df_hospbeds.head()

configure_plotly_browser_state()
px.pie(df_hospbeds,values='Total Beds',names="State/UT",title="State-Wise Number of Beds Available")

"""**ICMRTestingLabs.csv**"""

df_icmrlabs.head()

df_icmrlabs.info()

sum(df_icmrlabs.duplicated())

df_icmrlabs.isnull().sum()

configure_plotly_browser_state()  # this is required to display plotly plots in colab
fig = px.treemap(df_icmrlabs, path=['state','city'],color='city',color_continuous_scale='reds',hover_data=['lab','address'],)
fig.show()

plt.figure(figsize=(16, 10))
plt.title('Labs Across State')
df_icmrlabs.state.value_counts().plot.bar(color='r');

plt.figure(figsize=(35, 15))
plt.title('Labs Across City',size='30')
df_icmrlabs['city'].value_counts().plot.bar(color='b');

plt.figure(figsize=(12, 8))
plt.title('Lab Type')
sns.countplot(df_icmrlabs['type'])

"""**ICMRTestingDetails.csv**"""

df_icmrdet.head()

df_icmrdet.info()

df_icmrdet.isnull().sum()

df_icmrdet.drop('SNo',axis=1,inplace=True)

sum(df_icmrdet.duplicated())

sns.pairplot(df_icmrdet)

df_icmrdet['DateTime']=pd.to_datetime(df_icmrdet['DateTime'],infer_datetime_format=True)

df_icmrdet.groupby(by='DateTime').sum().plot(kind='line')

plt.figure(figsize=(12,8))
plt.title('Total Samples Tested',size='15')
plt.bar(df_icmrdet.DateTime, df_icmrdet.TotalSamplesTested)

plt.figure(figsize=(12,8))
plt.title('Total Individuals Tested',size='15')
plt.bar(df_icmrdet.DateTime, df_icmrdet.TotalIndividualsTested,color='r')

plt.figure(figsize=(12,8))
plt.title('Total Positive Cases',size='15')
plt.bar(df_icmrdet.DateTime, df_icmrdet.TotalPositiveCases,color='g')

"""**covid_19_india.csv**

COVID cases w.r.t State/UnionTerritory analysis
"""

df_covidindia.head()

df_covidindia.info()

df_covidindia.isnull().sum()

df_covidindia.drop('Sno',axis=1,inplace=True)

df_covidindia.drop('ConfirmedIndianNational',axis=1,inplace=True)

df_covidindia.drop('ConfirmedForeignNational',axis=1,inplace=True)

# calculating 'Active' cases
df_covidindia['Active']=df_covidindia['Confirmed']-df_covidindia['Cured']-df_covidindia['Deaths']

df_covidindia.head()

df_covidindia.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='YlOrBr',subset=["Confirmed"]).background_gradient(cmap='Reds',subset=["Deaths"]).background_gradient(cmap='Greens',subset=["Cured"]).background_gradient(cmap='Blues',subset=["Active"])

df1=df_covidindia.copy(deep=True)

df1.head()

df1.drop('Date',axis=1,inplace=True)

df1.drop('Time',axis=1,inplace=True)

df1=pd.pivot_table(df1,index=['State/UnionTerritory'],aggfunc=np.sum)

df1=df1.reset_index()

df1.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='YlOrBr',subset=["Confirmed"])\
                        .background_gradient(cmap='Reds',subset=["Deaths"])\
                        .background_gradient(cmap='Greens',subset=["Cured"])\
                        .background_gradient(cmap='Blues',subset=["Active"])

# flourish data visualization - live story
# run this cell to see live story if not visible
import IPython
IPython.display.HTML('<div class="flourish-embed flourish-bar-chart-race" data-src="visualisation/1977187" data-url="https://flo.uri.sh/visualisation/1977187/embed"><script src="https://public.flourish.studio/resources/embed.js"></script></div>')

configure_plotly_browser_state()
px.pie(df1,values='Active',names="State/UnionTerritory",title="State-Wise Distribution of Active cases")

"""**population_india_census2011.csv**

Population Analysis
"""

df_population.head()

df_population.info()

df_population.isnull().sum()

df_population.drop('Sno',axis=1,inplace=True)

sum(df_population.duplicated())

configure_plotly_browser_state()
fig = px.treemap(df_population, path=['State / Union Territory','Density'],color='State / Union Territory',color_continuous_scale='reds',hover_data=['Population','Rural population','Urban population','Area','Density','Gender Ratio'])
fig.show()

"""**StatewiseTestingDetails.csv**"""

df_statewise.head()

df_statewise.info()

sum(df_statewise.duplicated())

df_statewise=df_statewise.drop_duplicates()

sum(df_statewise.duplicated())

df_statewise.isnull().sum()

df_statewise.drop('Date',axis=1,inplace=True)

df_state=pd.pivot_table(df_statewise,index=['State'],aggfunc=np.sum)

df_state.head()

df_state=df_state.astype('int64')

df_state=df_state.reset_index()

df_state.sort_values('TotalSamples', ascending= False).style.background_gradient(cmap='Greens',subset=["Negative"])\
                        .background_gradient(cmap='Reds',subset=["Positive"])\
                        .background_gradient(cmap='YlOrBr',subset=["TotalSamples"])

"""**Merging all the related datasets to analyze more correlations in dataset:**"""

df_population=df_population.rename(columns={'State / Union Territory':'State/UnionTerritory'})

df_state=df_state.rename(columns={'State':'State/UnionTerritory'})

df_merge=pd.merge(df_population,df1,on='State/UnionTerritory')  # df1 was equal df_covidindia.copy(deep=True)

df_merge=pd.merge(df_merge,df_state,on='State/UnionTerritory')

df_individual=df_population.rename(columns={'detected_state':'State/UnionTerritory'})

df_merge=pd.merge(df_merge,df_individual,on='State/UnionTerritory')

df_hospbeds=df_hospbeds.rename(columns={'State/UT':'State/UnionTerritory'})

df_merge=pd.merge(df_merge,df_hospbeds,on='State/UnionTerritory')

df_icmrlabs=df_icmrlabs.rename(columns={'state':'State/UnionTerritory'})

df_merge=pd.merge(df_merge,df_icmrlabs,on='State/UnionTerritory')

#merged dataset columns
df_merge.columns

df_merge.info()

df_merge.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='YlOrBr',subset=["Confirmed"])\
                        .background_gradient(cmap='Reds',subset=["Deaths"])\
                        .background_gradient(cmap='Greens',subset=["Cured"])\
                        .background_gradient(cmap='Blues',subset=["Active"])

sns.pairplot(df_merge)

# correlation of 'Active' cases with other features
df_merge.corrwith(df_merge['Active'])

plt.figure(figsize=(18,10))
df_merge.corrwith(df_merge['Active']).plot.bar(cmap='PiYG',grid=True)

plt.figure(figsize=(18,10))
sns.heatmap(df_merge.corr(),cmap='viridis',annot=True)

"""**lockdownindiawarningzones.csv**

Zones in India

India is divided into three zones:

Red Zone - Where cases are high

Orange Zone - Where cases are less

Greeen Zone - Where cases are very less or not present only
"""

df_lockdownwar.head()

df_lockdownwar.isnull().sum()

df_lockdownwar.drop('S.no',axis=1,inplace=True)

sum(df_lockdownwar.duplicated())

configure_plotly_browser_state()
fig = px.pie(df_lockdownwar,names="Zone",template="seaborn")
fig.update_traces(rotation=90, pull=0.05, textinfo="percent+label")
fig.show()

configure_plotly_browser_state()
fig = px.treemap(df_lockdownwar, path=["State",'Zone','District'],color='Zone', hover_data=['Zone'])
fig.show()

configure_plotly_browser_state()
fig = px.sunburst(df_lockdownwar, path=["State",'Zone'],color='Zone', hover_data=['Zone'])
fig.show()

"""This marks the end of Explortory Data Analysis and Data Visualization.

Predictions on the dataset 1 will be included in the Part II of this project.
"""